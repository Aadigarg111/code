// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
var MemStorage = class {
  users;
  challenges;
  progress;
  currentIds;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.challenges = /* @__PURE__ */ new Map();
    this.progress = /* @__PURE__ */ new Map();
    this.currentIds = { users: 1, challenges: 1, progress: 1 };
  }
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByGithubId(githubId) {
    return Array.from(this.users.values()).find((user) => user.githubId === githubId);
  }
  async createUser(user) {
    const id = this.currentIds.users++;
    const newUser = { ...user, id };
    this.users.set(id, newUser);
    return newUser;
  }
  async updateUser(id, updates) {
    const user = await this.getUser(id);
    if (!user) throw new Error("User not found");
    const updatedUser = { ...user, ...updates };
    this.users.set(id, updatedUser);
    return updatedUser;
  }
  async createChallenge(challenge) {
    const id = this.currentIds.challenges++;
    const newChallenge = { ...challenge, id, isActive: true };
    this.challenges.set(id, newChallenge);
    return newChallenge;
  }
  async getChallenge(id) {
    return this.challenges.get(id);
  }
  async getUserChallenges(userId) {
    return Array.from(this.challenges.values()).filter(
      (challenge) => challenge.creatorId === userId
    );
  }
  async getActiveChallenges() {
    return Array.from(this.challenges.values()).filter(
      (challenge) => challenge.isActive
    );
  }
  async recordProgress(progressData) {
    const id = this.currentIds.progress++;
    const newProgress = { ...progressData, id };
    this.progress.set(id, newProgress);
    return newProgress;
  }
  async getProgress(challengeId, userId) {
    return Array.from(this.progress.values()).filter(
      (p) => p.challengeId === challengeId && p.userId === userId
    );
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { pgTable, text, serial, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  githubId: text("github_id").unique(),
  githubUsername: text("github_username"),
  githubAccessToken: text("github_access_token"),
  walletAddress: text("wallet_address"),
  avatarUrl: text("avatar_url")
});
var challenges = pgTable("challenges", {
  id: serial("id").primaryKey(),
  creatorId: integer("creator_id").notNull(),
  title: text("title").notNull(),
  description: text("description").notNull(),
  platform: text("platform").notNull(),
  // github, leetcode
  stakingAmount: integer("staking_amount").notNull(),
  durationDays: integer("duration_days").notNull(),
  startDate: timestamp("start_date").notNull(),
  isActive: boolean("is_active").notNull().default(true),
  rewardMultiplier: integer("reward_multiplier").default(100),
  // Base 100 = 1x, 110 = 1.1x
  chainId: integer("chain_id").default(1),
  // 1 for Ethereum Mainnet
  contractAddress: text("contract_address")
  // Smart contract address
});
var progress = pgTable("progress", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  challengeId: integer("challenge_id").notNull(),
  date: timestamp("date").notNull(),
  commitCount: integer("commit_count").notNull().default(0),
  problemsSolved: integer("problems_solved").notNull().default(0),
  xpEarned: integer("xp_earned").default(0)
});
var userStats = pgTable("user_stats", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().unique(),
  totalXp: integer("total_xp").default(0),
  level: integer("level").default(1),
  streak: integer("streak").default(0),
  longestStreak: integer("longest_streak").default(0),
  challengesCompleted: integer("challenges_completed").default(0),
  totalEarned: integer("total_earned").default(0),
  // In wei
  rank: text("rank").default("Novice"),
  // Novice, Apprentice, Expert, Master, Legend
  badges: text("badges").array().default([]),
  // Array of earned badges
  achievements: text("achievements").array().default([]),
  // Array of completed achievements
  title: text("title").default("Rookie Coder"),
  // Custom titles earned
  preferredChain: integer("preferred_chain").default(1),
  // Default to Ethereum
  subscriptionTier: text("subscription_tier").default("basic")
  // basic, pro, elite
});
var insertUserSchema = createInsertSchema(users).omit({
  id: true,
  githubAccessToken: true
});
var insertChallengeSchema = createInsertSchema(challenges).omit({
  id: true,
  isActive: true,
  contractAddress: true
}).extend({
  stakingAmount: z.number().min(1e-3).max(100),
  durationDays: z.number().int().min(1).max(365)
});
var insertProgressSchema = createInsertSchema(progress).omit({
  id: true
});

// server/routes.ts
async function registerRoutes(app2) {
  app2.post("/api/auth/github", async (req, res) => {
    const { code } = req.body;
    if (!code) {
      return res.status(400).json({ message: "GitHub code is required" });
    }
    try {
      const mockGithubUser = {
        id: "123456",
        login: "mockuser",
        avatar_url: "https://github.com/ghost.png"
      };
      let user = await storage.getUserByGithubId(mockGithubUser.id);
      if (!user) {
        user = await storage.createUser({
          username: mockGithubUser.login,
          githubId: mockGithubUser.id,
          githubUsername: mockGithubUser.login,
          avatarUrl: mockGithubUser.avatar_url,
          walletAddress: null,
          githubAccessToken: "mock_token"
        });
      }
      req.session.userId = user.id;
      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "Failed to authenticate with GitHub" });
    }
  });
  app2.post("/api/challenges", async (req, res) => {
    try {
      const challenge = insertChallengeSchema.parse(req.body);
      const newChallenge = await storage.createChallenge(challenge);
      res.json(newChallenge);
    } catch (error) {
      res.status(400).json({ message: "Invalid challenge data" });
    }
  });
  app2.get("/api/challenges", async (req, res) => {
    const challenges2 = await storage.getActiveChallenges();
    res.json(challenges2);
  });
  app2.get("/api/challenges/:id", async (req, res) => {
    const challenge = await storage.getChallenge(parseInt(req.params.id));
    if (!challenge) {
      return res.status(404).json({ message: "Challenge not found" });
    }
    res.json(challenge);
  });
  app2.post("/api/progress", async (req, res) => {
    try {
      const progress2 = insertProgressSchema.parse(req.body);
      const newProgress = await storage.recordProgress(progress2);
      res.json(newProgress);
    } catch (error) {
      res.status(400).json({ message: "Invalid progress data" });
    }
  });
  app2.get("/api/progress/:challengeId/:userId", async (req, res) => {
    const { challengeId, userId } = req.params;
    const progress2 = await storage.getProgress(
      parseInt(challengeId),
      parseInt(userId)
    );
    res.json(progress2);
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2, { dirname as dirname2 } from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";
var __filename = fileURLToPath(import.meta.url);
var __dirname = dirname(__filename);
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared")
    }
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var __filename2 = fileURLToPath2(import.meta.url);
var __dirname2 = dirname2(__filename2);
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        __dirname2,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(__dirname2, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();